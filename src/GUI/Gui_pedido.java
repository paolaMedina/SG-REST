/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Clases.CategoriaProducto;
import Clases.Empleado;
import Clases.EstadoPedido;
import Clases.Mesa;
import Clases.Pedido;
import Clases.Producto;
import Clases.ProductoPedido;
import Clases.ProductoPedidoPK;
import Controladores.CategoriaProductoJpaController;
//import Clases.ProductoPedido;
//import Clases.ProductoPedidoPK;
import Controladores.EmpleadoJpaController;
import Controladores.EstadoPedidoJpaController;
import Controladores.MesaJpaController;
import Controladores.PedidoJpaController;
import Controladores.ProductoJpaController;
import Controladores.ProductoPedidoJpaController;
//import Controladores.ProductoPedidoJpaController;
import Controladores.exceptions.*;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Paola
 */
public class Gui_pedido extends javax.swing.JFrame {

    DefaultTableModel modeloProductosPedido = new DefaultTableModel();
    DefaultTableModel modeloProductosSeleccion = new DefaultTableModel();
   
    /**
     * Creates new form empleado
     */
    public Gui_pedido(Gui_VentanaPrincipal principal) {
        initComponents();
        
        
        botones();
        deshabilitar();
       
        
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanelProductos = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxCategoria = new javax.swing.JComboBox<>();
        jButtonAgregarProducto = new javax.swing.JButton();
        jButtonEliminarProducto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProductos = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldCantidad = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableProductosCategoria = new javax.swing.JTable();
        jLabelHoraInicio = new javax.swing.JLabel();
        jLabelNumPedido = new javax.swing.JLabel();
        jTextFieldMesero = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabelHoraFin = new javax.swing.JLabel();
        jComboBoxMesas = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxEstado = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jButtonBuscar = new javax.swing.JButton();
        jButtonModificar = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jButtonNuevo = new javax.swing.JButton();
        jButtonagregar = new javax.swing.JButton();

        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos del Pedido", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabel1.setText("Numero de Pedido:");

        jLabel2.setText("Numero de mesa:");

        jLabel.setText("Id del Mesero:");

        jLabel4.setText("Hora Inicio del Pedido:");

        jPanelProductos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Productos del pedido", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel7.setText("Categoria Producto: ");

        jComboBoxCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione...", "Almuerzo-Cena", "Brunch-Desayunos", "Bebidas", "Helados" }));
        jComboBoxCategoria.setToolTipText("");
        jComboBoxCategoria.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxCategoriaItemStateChanged(evt);
            }
        });

        jButtonAgregarProducto.setText("Agregar al pedido");
        jButtonAgregarProducto.setToolTipText("");
        jButtonAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarProductoActionPerformed(evt);
            }
        });

        jButtonEliminarProducto.setText("Eliminar del pedido");
        jButtonEliminarProducto.setToolTipText("");
        jButtonEliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarProductoActionPerformed(evt);
            }
        });

        jTableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producto", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableProductos);

        jLabel8.setText("Cantidad:");

        jTextFieldCantidad.setToolTipText("");
        jTextFieldCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCantidadActionPerformed(evt);
            }
        });
        jTextFieldCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldCantidadKeyTyped(evt);
            }
        });

        jTableProductosCategoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre Producto", "Precio"
            }
        ));
        jScrollPane2.setViewportView(jTableProductosCategoria);

        javax.swing.GroupLayout jPanelProductosLayout = new javax.swing.GroupLayout(jPanelProductos);
        jPanelProductos.setLayout(jPanelProductosLayout);
        jPanelProductosLayout.setHorizontalGroup(
            jPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProductosLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelProductosLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, 0)
                        .addComponent(jComboBoxCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(140, 140, 140)
                        .addComponent(jLabel8)
                        .addGap(13, 13, 13)
                        .addComponent(jTextFieldCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelProductosLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(jPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelProductosLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jButtonAgregarProducto)
                                .addGap(33, 33, 33)
                                .addComponent(jButtonEliminarProducto))))))
        );
        jPanelProductosLayout.setVerticalGroup(
            jPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProductosLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jTextFieldCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelProductosLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(jPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonAgregarProducto)
                            .addComponent(jButtonEliminarProducto)))))
        );

        jTextFieldMesero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMeseroActionPerformed(evt);
            }
        });

        jLabel5.setText("Hora Fin del Pedido:");

        jLabel3.setText("Estado: ");

        jComboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione...", "Pendiente", "Entregado", "Finalizado" }));
        jComboBoxEstado.setToolTipText("");
        jComboBoxEstado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxEstadoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jPanelProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(10, 10, 10)
                        .addComponent(jLabelNumPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(10, 10, 10)
                        .addComponent(jComboBoxMesas, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldMesero, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel4)
                        .addGap(10, 10, 10)
                        .addComponent(jLabelHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelHoraFin, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelNumPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldMesero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel))
                    .addComponent(jLabelHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel2))
                            .addComponent(jComboBoxMesas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel5))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabelHoraFin, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))))
                .addGap(8, 8, 8)
                .addComponent(jPanelProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabelNumPedido.getAccessibleContext().setAccessibleName("jLabelNumPedido");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButtonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/16 (Search).jpg"))); // NOI18N
        jButtonBuscar.setText("Buscar Pedido");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jButtonModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/3 modificar.png"))); // NOI18N
        jButtonModificar.setText("Modificar Pedido");
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });

        jButtonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/16 (Delete).jpg"))); // NOI18N
        jButtonSalir.setText("salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jButtonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/3 eliminar.png"))); // NOI18N
        jButtonEliminar.setText("Eliminar Pedido");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Wzdelete.jpg"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/3 anadir.png"))); // NOI18N
        jButtonNuevo.setText("nuevo");
        jButtonNuevo.setToolTipText("");
        jButtonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoActionPerformed(evt);
            }
        });

        jButtonagregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/16 (Save).jpg"))); // NOI18N
        jButtonagregar.setText("Realizar Pedido");
        jButtonagregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonagregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(jButtonCancelar)
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonagregar)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButtonModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEliminar)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNuevo)
                    .addComponent(jButtonBuscar)
                    .addComponent(jButtonModificar)
                    .addComponent(jButtonEliminar)
                    .addComponent(jButtonagregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButtonSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(159, 159, 159))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        char car=evt.getKeyChar();
        if((car<'a' || car>'z') && (car<'A' || car>'Z')&&(car<' '||car>' ')) evt.consume();

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jButtonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoActionPerformed
        // TODO add your handling code here:
        habilitar();
        this.jButtonBuscar.setEnabled(false);
        this.jButtonagregar.setEnabled(true);
        
        EntityManagerFactory emf1 = Persistence.createEntityManagerFactory("SG-RESTPU");
        
        //Se crea un objeto tipo Date donde se almacenara la hora donde inicia el pedido
        Date fechaActual = new Date();
        SimpleDateFormat horaFormato = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        String horaInicio = horaFormato.format(fechaActual);
        this.jLabelHoraInicio.setText(horaInicio);
        
        
        PedidoJpaController daoPedido = new PedidoJpaController(emf1);
        String numPedido = Integer.toString(daoPedido.getPedidoCount() + 1);
        this.jLabelNumPedido.setText(numPedido);
        
        modeloProductosSeleccion.addColumn("Id");
        modeloProductosSeleccion.addColumn("Nombre");
        modeloProductosSeleccion.addColumn("Precio");
  
        MesaJpaController daoMesa = new MesaJpaController(emf1);
        List<Mesa> mesas =  daoMesa.findMesaEntities();
        
        for (int i = 0; i < mesas.size(); i++) {
            this.jComboBoxMesas.addItem(mesas.get(i).getNumMesa().toString());
        }
        
        
        
    }//GEN-LAST:event_jButtonNuevoActionPerformed
   
   
    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        botones();
        deshabilitar();
        DefaultTableModel modelo = (DefaultTableModel) jTableProductos.getModel();
        while(modelo.getRowCount()>0)modelo.removeRow(0);
 
        
        
        
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        String id = JOptionPane.showInputDialog(null, "Ingrese el numero del pedido que desea eliminar", "Eliminar", JOptionPane.QUESTION_MESSAGE);

        int numPedido = Integer.parseInt(id);
        //Se crea en EntityManagerFactory con el nombre de nuestra unidad de persistencia
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("SG-RESTPU");
        
        //se crea el controlador del pedido
        PedidoJpaController daoPedido = new PedidoJpaController(emf);
        
        //se crea el controlador para el productoPedido asociado a un pedido
        ProductoPedidoJpaController daoProductoPedido = new ProductoPedidoJpaController(emf);
            
        try {
            
            List<ProductoPedido> productosPedido = daoProductoPedido.findProductoPedidoEntities(numPedido);
            for (int i = 0; i < productosPedido.size(); i++) {
                daoProductoPedido.destroy(productosPedido.get(i).getProductoPedidoPK());
            }
            
            daoPedido.destroy(numPedido);
            JOptionPane.showMessageDialog(null, "El pedido se elimino exitosamente", "Exito!", JOptionPane.INFORMATION_MESSAGE);
        } catch (IllegalOrphanException ex) {
            Logger.getLogger(Gui_empleado.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NonexistentEntityException ex) {
            JOptionPane.showMessageDialog(null, "El pedido que desea eliminar no existe", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // TODO add your handling code here:
        try{
         Gui_VentanaPrincipal gui_principal =new Gui_VentanaPrincipal(new Gui_login());
    
         gui_principal.show();
         gui_principal.setLocation(50, 5);
         this.dispose();
       }catch(Exception e){}
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed
               
        try {
            if (verificarCamposVacios() == false) {
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("SG-RESTPU");
        
                //variables para el pedido

                int numPedido = Integer.parseInt(this.jLabelNumPedido.getText());
                String idMesero = this.jTextFieldMesero.getText();
                EmpleadoJpaController daoEmpleado = new EmpleadoJpaController(emf);
                Empleado empleado = daoEmpleado.findEmpleado(idMesero);

                int numMesa = this.jComboBoxMesas.getSelectedIndex()+1;
                MesaJpaController daoMesa = new MesaJpaController(emf);
                Mesa mesa = daoMesa.findMesa(numMesa);

                Date horaFinal = new Date();


                Date horaInicio = null;    
                SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                try {
                    horaInicio = formato.parse(this.jLabelHoraInicio.getText());
                } catch (ParseException ex) {
                    Logger.getLogger(Gui_pedido.class.getName()).log(Level.SEVERE, null, ex);
                }

                String estadoSeleccionado = this.jComboBoxEstado.getSelectedItem().toString();
                int idEstado = 0;

                if (estadoSeleccionado.equalsIgnoreCase("Pendiente")) {
                    idEstado = 1;
                }else if (estadoSeleccionado.equalsIgnoreCase("Entregado")) {
                    idEstado = 2;
                }else if (estadoSeleccionado.equalsIgnoreCase("Finalizado")){
                    idEstado = 3;
                    try {
                        horaFinal = formato.parse(this.jLabelHoraFin.getText());
                    } catch (ParseException ex) {
                        Logger.getLogger(Gui_pedido.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                EstadoPedidoJpaController daoEstadoPedido = new EstadoPedidoJpaController(emf);
                EstadoPedido estado = daoEstadoPedido.findEstadoPedido(idEstado);

                Pedido pedido = new Pedido();

                pedido.setNumPedido(numPedido);
                pedido.setHoraFinalPedido(horaFinal);
                pedido.setHoraInicioPedido(horaInicio);
                pedido.setNumMesa(mesa);
                pedido.setIdEmpleado(empleado);
                pedido.setIdEstadoPedido(estado);

                PedidoJpaController daoPedido = new PedidoJpaController(emf);
                daoPedido.edit(pedido);
                deshabilitar();
                
                
                
     
                ProductoJpaController daoProducto = new ProductoJpaController(emf);
                ProductoPedidoJpaController daoProductoPedido = new ProductoPedidoJpaController(emf);
                List<ProductoPedido> productosPedido = daoProductoPedido.findProductoPedidoEntities(numPedido);
                for (int i = 0; i < productosPedido.size(); i++) {
                    daoProductoPedido.destroy(productosPedido.get(i).getProductoPedidoPK());
                }
                
           
                for (int i = 0; i < modeloProductosPedido.getRowCount(); i++) {

                    String nombreProducto = modeloProductosPedido.getValueAt(i, 0).toString();
                    int cantidadProducto = Integer.parseInt(modeloProductosPedido.getValueAt(i, 1).toString());

                    List<Producto> productos = daoProducto.findProducto(nombreProducto);

                    Producto producto = productos.get(0);
                    int idProducto = producto.getProductoPK().getId();

                    ProductoPedido productoPedido = new ProductoPedido();
                    ProductoPedidoPK productoPedidoPK = new ProductoPedidoPK(numPedido, idProducto, nombreProducto);

                    productoPedido.setPedido(pedido);
                    productoPedido.setProducto(producto);
                    productoPedido.setCatidad(cantidadProducto);
                    productoPedido.setProductoPedidoPK(productoPedidoPK);

                    try {

                        daoProductoPedido.create(productoPedido);

                        JOptionPane.showMessageDialog(null, "El pedido se edito exitosamente", "Exito!", JOptionPane.INFORMATION_MESSAGE);

                    } catch (NullPointerException ex) {
                       limpiar();
                    } catch (Exception ex) {
                        Logger.getLogger(Gui_empleado.class.getName()).log(Level.SEVERE, null, ex);
                    }     

                }
                limpiar();
                botones();

                
            }else{
                JOptionPane.showMessageDialog(null, "Llene los datos obligatoriosl", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Llene los datos obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
            limpiar();
        } catch (Exception ex) {
            Logger.getLogger(Gui_empleado.class.getName()).log(Level.SEVERE, null, ex);
        }     
        

            
    }//GEN-LAST:event_jButtonModificarActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        while(modeloProductosSeleccion.getColumnCount()== 0){  
            modeloProductosSeleccion.addColumn("Id");
            modeloProductosSeleccion.addColumn("Nombre");
            modeloProductosSeleccion.addColumn("Precio");
        }
            
        while(modeloProductosSeleccion.getRowCount()>0)modeloProductosSeleccion.removeRow(0);
        
        String numPedido = JOptionPane.showInputDialog(null, "Ingrese el numero del pedido que desea buscar", "Buscar", JOptionPane.QUESTION_MESSAGE);

        int idParse = Integer.parseInt(numPedido);
        
        //Se crea en EntityManagerFactory con el nombre de nuestra unidad de persistencia
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("SG-RESTPU");
               
        PedidoJpaController daoPedido = new PedidoJpaController(emf);
        ProductoPedidoJpaController daoProductoPedido = new ProductoPedidoJpaController(emf);
        ProductoJpaController daoProducto = new ProductoJpaController(emf);
        
        try{
            List<ProductoPedido> productosPedido = daoProductoPedido.findProductoPedidoEntities(idParse);

           
            this.modeloProductosPedido = (DefaultTableModel) jTableProductos.getModel();
            
            for (int i = 0; i < productosPedido.size(); i++) {
                
                int idProducto = productosPedido.get(i).getProductoPedidoPK().getProductoId();
                String nombreProducto = daoProducto.findProducto(idProducto).get(0).getProductoPK().getNombre();
                Vector<String> vector = new Vector<String>();
                               
                vector.add(nombreProducto);
                String cantidad = Integer.toString(productosPedido.get(i).getCatidad());
                vector.add(cantidad);
                this.modeloProductosPedido.addRow(vector);
            }
            
            Pedido pedido = daoPedido.findPedido(idParse);
            this.jLabelNumPedido.setText(Integer.toString(pedido.getNumPedido()));
            
                    
            SimpleDateFormat horaFormato = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
            String horaInicio = horaFormato.format(pedido.getHoraInicioPedido());
            this.jLabelHoraInicio.setText(horaInicio);
            
            String horaFin = horaFormato.format(pedido.getHoraFinalPedido());
            this.jLabelHoraFin.setText(horaFin);
            
            this.jTextFieldMesero.setText(pedido.getIdEmpleado().getIdentificacion());
            
            
            MesaJpaController daoMesa = new MesaJpaController(emf);
            List<Mesa> mesas =  daoMesa.findMesaEntities();
        
            for (int i = 0; i < mesas.size(); i++) {
            this.jComboBoxMesas.addItem(mesas.get(i).getNumMesa().toString());
            }
            
            this.jComboBoxMesas.setSelectedIndex(pedido.getNumMesa().getNumMesa() - 1);            
            
            if(pedido.getIdEstadoPedido().getEstado().equalsIgnoreCase("Pendiente")){
                this.jComboBoxEstado.setSelectedIndex(1);
            }else if(pedido.getIdEstadoPedido().getEstado().equalsIgnoreCase("Entregado")){
                this.jComboBoxEstado.setSelectedIndex(2);
            }else{
                this.jComboBoxEstado.setSelectedIndex(3);
            }
            
           
            
            this.jButtonagregar.setEnabled(false);
            this.jButtonBuscar.setEnabled(false);
            this.jButtonModificar.setEnabled(true);
            this.jButtonEliminar.setEnabled(false);
            this.jButtonNuevo.setEnabled(false);
            
            habilitar();
            
            
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "El pedido no existe", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonagregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonagregarActionPerformed
                    
        try {
            if (verificarCamposVacios() == false) {
                
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("SG-RESTPU");

                //variables para el pedido

                int numPedido = Integer.parseInt(this.jLabelNumPedido.getText());
                String idMesero = this.jTextFieldMesero.getText();
                EmpleadoJpaController daoEmpleado = new EmpleadoJpaController(emf);
                Empleado empleado = daoEmpleado.findEmpleado(idMesero);

                int numMesa = this.jComboBoxMesas.getSelectedIndex()+1;
                MesaJpaController daoMesa = new MesaJpaController(emf);
                Mesa mesa = daoMesa.findMesa(numMesa);

                Date horaFinal = new Date();
                Date horaInicio = null;    
                SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                
                try {
                    horaInicio = formato.parse(this.jLabelHoraInicio.getText());
                } catch (ParseException ex) {
                    Logger.getLogger(Gui_pedido.class.getName()).log(Level.SEVERE, null, ex);
                }

                String estadoSeleccionado = this.jComboBoxEstado.getSelectedItem().toString();
                int idEstado = 0;

                if (estadoSeleccionado.equalsIgnoreCase("Pendiente")) {
                    idEstado = 1;
                }else if (estadoSeleccionado.equalsIgnoreCase("Entregado")) {
                    idEstado = 2;
                }else if (estadoSeleccionado.equalsIgnoreCase("Finalizado")){
                    idEstado = 3;
                }

                EstadoPedidoJpaController daoEstadoPedido = new EstadoPedidoJpaController(emf);
                EstadoPedido estado = daoEstadoPedido.findEstadoPedido(idEstado);

                Pedido pedido = new Pedido();

                pedido.setNumPedido(numPedido);
                pedido.setHoraFinalPedido(horaFinal);
                pedido.setHoraInicioPedido(horaInicio);
                pedido.setNumMesa(mesa);
                pedido.setIdEmpleado(empleado);
                pedido.setIdEstadoPedido(estado);

                PedidoJpaController daoPedido = new PedidoJpaController(emf);
                daoPedido.create(pedido);
                ProductoJpaController daoProducto = new ProductoJpaController(emf);
                ProductoPedidoJpaController daoProductoPedido = new ProductoPedidoJpaController(emf);

                for (int i = 0; i < modeloProductosPedido.getRowCount(); i++) {

                    String nombreProducto = modeloProductosPedido.getValueAt(i, 0).toString();
                    int cantidadProducto = Integer.parseInt(modeloProductosPedido.getValueAt(i, 1).toString());

                    List<Producto> productos = daoProducto.findProducto(nombreProducto);

                    Producto producto = productos.get(0);
                    int idProducto = producto.getProductoPK().getId();

                    ProductoPedido productoPedido = new ProductoPedido();
                    ProductoPedidoPK productoPedidoPK = new ProductoPedidoPK(numPedido, idProducto, nombreProducto);

                    productoPedido.setPedido(pedido);
                    productoPedido.setProducto(producto);
                    productoPedido.setCatidad(cantidadProducto);
                    productoPedido.setProductoPedidoPK(productoPedidoPK);

                    try {

                        daoProductoPedido.create(productoPedido);
                    } catch (NullPointerException ex) {
                        
                        JOptionPane.showMessageDialog(null, "Uno de los productos no se agrego satisfactoriamente", "Alerta!", JOptionPane.ERROR_MESSAGE);
                        limpiar();
                    } catch (Exception ex) {
                        Logger.getLogger(Gui_empleado.class.getName()).log(Level.SEVERE, null, ex);
                    }     

                }
                
                JOptionPane.showMessageDialog(null, "El pedido se realizo con exito", "Exito!", JOptionPane.INFORMATION_MESSAGE);
                limpiar();
                botones();
                deshabilitar();
               
            }else{
                JOptionPane.showMessageDialog(null, "Llene los datos obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
                limpiar();
            }
            
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Llene los datos obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
            limpiar();
        } catch (Exception ex) {
            Logger.getLogger(Gui_empleado.class.getName()).log(Level.SEVERE, null, ex);
        }     

    }//GEN-LAST:event_jButtonagregarActionPerformed

    public boolean verificarCamposVacios(){
        boolean var =false;
         
         if (jTextFieldMesero.getText().equalsIgnoreCase("") || jComboBoxEstado.getSelectedItem().toString().equalsIgnoreCase("Seleccione...")) {
             
            var = true;             
         }
         
         return var;
    }
    private void jTextFieldCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCantidadActionPerformed

    private void jButtonAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarProductoActionPerformed
        int seleccion = this.jTableProductosCategoria.getSelectedRow();   
        boolean existe = false;
        
        for (int i = 0; i < modeloProductosPedido.getRowCount(); i++) {
            if( this.jTableProductosCategoria.getValueAt(seleccion, 1).toString().equalsIgnoreCase(modeloProductosPedido.getValueAt(i, 0).toString())){
               existe =true;
               break;
            }else{
                existe = false;
            } 
        }
        
        if(existe == false){
            if( !this.jTextFieldCantidad.getText().equalsIgnoreCase("")){
            
                              
                    String producto = this.jTableProductosCategoria.getValueAt(seleccion, 1).toString();
                    String cantidad = this.jTextFieldCantidad.getText();
                    this.modeloProductosPedido = (DefaultTableModel) jTableProductos.getModel();

                    Object []object = new Object[2];
                    object[0] = producto;
                    object[1] = cantidad;

                    this.modeloProductosPedido.addRow(object);
            }else{
            JOptionPane.showMessageDialog(null, "Ingrese la cantidad del producto","ALERTA!",JOptionPane.INFORMATION_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(null, "El producto ya se encuentra en el pedido si desea agregar mas items del mismo borre primero el anterior registro", "Alerta!", JOptionPane.ERROR_MESSAGE);

        }
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButtonAgregarProductoActionPerformed

    private void jTextFieldMeseroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMeseroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldMeseroActionPerformed

    private void jButtonEliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarProductoActionPerformed
        int fila = jTableProductos.getSelectedRow();
        modeloProductosPedido.removeRow(fila);
    }//GEN-LAST:event_jButtonEliminarProductoActionPerformed

    private void jComboBoxCategoriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxCategoriaItemStateChanged
       
       
        while(modeloProductosSeleccion.getRowCount()>0)modeloProductosSeleccion.removeRow(0);
        
        String categoria = jComboBoxCategoria.getSelectedItem().toString();    
       
        int idCategoria = 0;
        if (categoria.equalsIgnoreCase("Almuerzo-Cena")) {
            idCategoria = 1;
        }else if (categoria.equalsIgnoreCase("Brunch-Desayunos")) {
            idCategoria = 2;
        }else if (categoria.equalsIgnoreCase("Bebidas")){
            idCategoria = 3;
        }else if(categoria.equalsIgnoreCase("Helados")){
            idCategoria = 4;
        }
        
             
        //Se crea en EntityManagerFactory con el nombre de nuestra unidad de persistencia
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("SG-RESTPU");
        
        ProductoJpaController daoProducto = new ProductoJpaController(emf);
        CategoriaProductoJpaController daoCategoria = new CategoriaProductoJpaController(emf);
        
       
        
        List<Producto> productos = daoProducto.findProductoEntities(idCategoria);
         
        Object[] fila = null;      
               
        for (int i = 0; i < productos.size(); i++) {
           
            modeloProductosSeleccion.addRow(fila);
            modeloProductosSeleccion.setValueAt(productos.get(i).getProductoPK().getId(), i, 0);
            modeloProductosSeleccion.setValueAt(productos.get(i).getProductoPK().getNombre(), i, 1);
            modeloProductosSeleccion.setValueAt(productos.get(i).getPrecio(), i, 2);
        }
        
        this.jTableProductosCategoria.setModel(modeloProductosSeleccion);
      
    }//GEN-LAST:event_jComboBoxCategoriaItemStateChanged

    private void jComboBoxEstadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxEstadoItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxEstadoItemStateChanged

    private void jTextFieldCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCantidadKeyTyped
        char c = evt.getKeyChar();
                  
        if(Character.isLetter(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldCantidadKeyTyped


     public void botones(){
        
        this.jButtonNuevo.setEnabled(true);
        this.jButtonBuscar.setEnabled(true);
        this.jButtonagregar.setEnabled(false);
        this.jButtonAgregarProducto.setEnabled(false);
        this.jButtonEliminarProducto.setEnabled(false);
        this.jButtonModificar.setEnabled(false);
        this.jButtonEliminar.setEnabled(true);
        
      
    }
    public void limpiar(){
        this.jTextFieldCantidad.setText("");
        this.jTextFieldMesero.setText("");
        this.jLabelNumPedido.setText("");
        this.jLabelHoraInicio.setText("");
        this.jLabelHoraFin.setText("");
        this.jComboBoxCategoria.setSelectedIndex(0);
        this.jComboBoxEstado.setSelectedIndex(0);
        this.jComboBoxMesas.setSelectedIndex(0);
        
        while(modeloProductosSeleccion.getRowCount()>0)modeloProductosSeleccion.removeRow(0);
        while(modeloProductosPedido.getRowCount()>0)modeloProductosPedido.removeRow(0);
       
        
    }
    
    public void generarTablaProductos(){
        
    }
    
    public void habilitar(){
       this.jLabelNumPedido.setEnabled(true);
       this.jComboBoxMesas.setEnabled(true);
       this.jLabelHoraInicio.setEnabled(true);
       this.jTextFieldMesero.setEnabled(true);
       this.jButtonAgregarProducto.setEnabled(true);
       this.jButtonEliminarProducto.setEnabled(true);
       this.jComboBoxEstado.setEnabled(true);
       this.jComboBoxMesas.setEnabled(true);
       this.jComboBoxCategoria.setEnabled(true);
       this.jTextFieldCantidad.setEnabled(true);
       this.jTableProductos.setEnabled(true);
       this.jTableProductosCategoria.setEnabled(true);
  }
    public void deshabilitar(){
        
        
        this.jLabelNumPedido.setEnabled(false);
        this.jComboBoxMesas.setEnabled(false);
        this.jTextFieldMesero.setEnabled(false);
        this.jLabelHoraInicio.setEnabled(false);
        this.jComboBoxEstado.setEnabled(false);
        this.jComboBoxMesas.setEnabled(false);
        this.jComboBoxCategoria.setEnabled(false);
        this.jTextFieldCantidad.setEnabled(false);
        this.jTableProductos.setEnabled(false);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui_pedido(new Gui_VentanaPrincipal (new Gui_login())).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregarProducto;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonEliminarProducto;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JButton jButtonNuevo;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JButton jButtonagregar;
    private javax.swing.JComboBox<String> jComboBoxCategoria;
    private javax.swing.JComboBox<String> jComboBoxEstado;
    private javax.swing.JComboBox<String> jComboBoxMesas;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelHoraFin;
    private javax.swing.JLabel jLabelHoraInicio;
    private javax.swing.JLabel jLabelNumPedido;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelProductos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableProductos;
    private javax.swing.JTable jTableProductosCategoria;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextFieldCantidad;
    private javax.swing.JTextField jTextFieldMesero;
    // End of variables declaration//GEN-END:variables
}
